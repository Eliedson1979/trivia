{"version":3,"sources":["services/localStorage.js","services/requestAPI.js","helpers/defaultPicture.js","components/Header.js","components/Loading.js","components/Question.js","pages/Game.js","redux/actions/index.js","pages/Login.js","pages/Settings.js","components/Score.js","components/FeedbackMessage.js","pages/Feedback.js","pages/Ranking.js","App.js","redux/reducers/player.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["saveStorage","key","item","localStorage","setItem","getStorage","getItem","JSON","stringify","category","difficulty","type","quantity","requestTokenAPI","a","fetch","response","json","data","token","setType","fetchGame","parse","includes","toLowerCase","URL","fetchCategories","categories","trivia_categories","getPicture","name","gravatarEmail","md5","toString","Header","email","score","hideScore","homeBtn","history","useHistory","className","data-testid","onClick","push","alt","src","defaultProps","connect","state","player","Loading","inSettings","Oval","stroke","Question","answer","index","btnIsDisable","click","correctAnswer","style","backgroundColor","border","color","disabled","value","decode","INITIAL_STATE","gameQuestions","gameCategory","questionName","questionNumber","answers","questionDifficulty","userAnswer","seconds","isFetching","Game","handleClick","target","setState","calculateScore","clearInterval","timerId","redirectTo","route","props","setGame","ERROR_CODE","response_code","removeItem","results","setNewQuestion","countDownTimer","nextQuestion","pastState","setGameAnswers","question","correct_answer","correct","wrongs","incorrect_answers","sort","Math","random","addCalcDispatch","setInterval","past","this","map","Component","dispatch","calc","payload","Login","isSaveButtonDisabled","handleChange","event","buttonChange","validation","test","length","preventDefault","addPlayerDispatch","htmlFor","id","onChange","maxLength","React","Settings","getCategoriesList","categoryName","find","isLoading","setNewOption","saveOption","to","Score","assertions","FeedbackMessage","idChange","componentDidMount","handlerMessage","Feedback","saveUserScore","picture","itemsSorted","concat","resetPlayer","resetScore","Ranking","items","b","onError","defaultPicture","App","exact","path","component","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1a670bf.chunk.js","sourcesContent":["export const saveStorage = (key, item) => {\n  localStorage.setItem(key, item);\n};\n\nexport const getStorage = (key) => {\n  const data = localStorage.getItem(key);\n  return data;\n};\n\nif (!getStorage('options')) {\n  saveStorage('options', JSON.stringify({\n    category: 'Any category',\n    difficulty: 'Any difficulty',\n    type: 'Any Type',\n    quantity: '10',\n  }));\n}\n","import { getStorage } from './localStorage';\n\nexport const requestTokenAPI = async () => {\n  try {\n    const URL = 'https://opentdb.com/api_token.php?command=request';\n    const response = await fetch(URL);\n    const data = await response.json();\n    return data.token;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst setType = (type) => {\n  if (type === 'True / False') return 'boolean';\n  if (type === 'Multiple Choice') return 'multiple';\n};\n\nexport const fetchGame = async (\n  token,\n  { category, difficulty, type, quantity } = JSON.parse(getStorage('options')),\n) => {\n  category = typeof category === 'string' ? '' : category;\n  difficulty = difficulty.includes('Any') ? '' : difficulty.toLowerCase();\n  type = type.includes('Any') ? '' : setType(type);\n\n  const URL = `https://opentdb.com/api.php?amount=${quantity}&token=${token}&category=${category}&difficulty=${difficulty}&type=${type}`;\n  try {\n    const response = await fetch(URL);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCategories = async () => {\n  try {\n    const URL = 'https://opentdb.com/api_category.php';\n    const response = await fetch(URL);\n    const { trivia_categories: categories } = await response.json();\n    return categories;\n  } catch (error) {\n    return error;\n  }\n};\n","import md5 from 'crypto-js/md5';\n\nexport default function getPicture(name, gravatarEmail) {\n  // const defaultPicture = encodeURI(`https://ui-avatars.com/api//${name}/80/random`);\n  // return `https://www.gravatar.com/avatar/${md5(gravatarEmail).toString()}?d=${defaultPicture}`;\n  return `https://www.gravatar.com/avatar/${md5(gravatarEmail).toString()}`;\n}\n","import React from 'react';\nimport { bool, number, string } from 'prop-types';\nimport { FaHome } from 'react-icons/fa';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport getPicture from '../helpers/defaultPicture';\nimport '../styles/Header.css';\n\nfunction Header({ email, name, score, hideScore, homeBtn }) {\n  const history = useHistory();\n  return (\n    <header className=\"header-game\">\n      {!hideScore && (\n        <div className=\"Score-Container\">\n          <p data-testid=\"header-score\">{score}</p>\n        </div>\n      )}\n      {homeBtn && (\n        <button\n          type=\"button\"\n          className=\"home-button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => history.push('/') }\n          alt=\"House Icon\"\n        >\n          <FaHome />\n        </button>\n      )}\n      <div className=\"Player-Container\">\n        <p data-testid=\"header-player-name\">{name}</p>\n        <img\n          src={ getPicture(name, email) }\n          alt={ name }\n          data-testid=\"header-profile-picture\"\n        />\n      </div>\n    </header>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score,\n});\n\nHeader.defaultProps = {\n  email: '',\n  name: '',\n  score: 0,\n  hideScore: false,\n  homeBtn: false,\n};\n\nHeader.propTypes = {\n  email: string,\n  name: string,\n  score: number,\n  hideScore: bool,\n  homeBtn: bool,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { bool } from 'prop-types';\nimport LoadingIcons from 'react-loading-icons';\nimport '../styles/Game.css';\n\nfunction Loading({ inSettings }) {\n  return (\n    <LoadingIcons.Oval\n      className=\"Loading\"\n      stroke={ inSettings ? '#dfe3eb' : '#282c34' }\n    />\n  );\n}\n\nLoading.defaultProps = { inSettings: false };\nLoading.propTypes = { inSettings: bool };\n\nexport default Loading;\n","import { decode } from 'he';\nimport { bool, func, number, string } from 'prop-types';\nimport React from 'react';\n\nfunction Question({\n  answer,\n  index,\n  btnIsDisable,\n  click,\n  correctAnswer,\n  onClick,\n}) {\n  const setAnswerClass = () => {\n    const correct = {\n      backgroundColor: '#697a21',\n      border: '3px solid #697a21',\n      color: 'white',\n    };\n    const wrong = {\n      backgroundColor: '#dd403a',\n      border: '3px solid #dd403a',\n      color: 'white',\n    };\n    if (answer === correctAnswer) return correct;\n    return wrong;\n  };\n\n  return (\n    <button\n      key={ answer }\n      type=\"button\"\n      name={ answer === correctAnswer ? 'correct' : 'wrong' }\n      style={ click ? setAnswerClass() : {} }\n      className=\"Answer-Btn\"\n      disabled={ btnIsDisable }\n      data-testid={\n        answer === correctAnswer ? 'correct-answer' : `wrong-answer-${index}`\n      }\n      onClick={ onClick }\n      value={ answer }\n    >\n      {decode(answer)}\n    </button>\n  );\n}\n\nQuestion.defaultProps = {\n  answer: '',\n  correctAnswer: '',\n  btnIsDisable: false,\n  click: false,\n  index: 0,\n};\n\nQuestion.propTypes = {\n  answer: string,\n  correctAnswer: string,\n  btnIsDisable: bool,\n  click: bool,\n  index: number,\n  onClick: func.isRequired,\n};\n\nexport default Question;\n","import React, { Component } from 'react';\nimport { HiClock } from 'react-icons/hi';\nimport { RiCheckboxBlankCircleFill } from 'react-icons/ri';\nimport { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport { decode } from 'he';\nimport { func, number, shape } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getStorage } from '../services/localStorage';\nimport { fetchGame } from '../services/requestAPI';\nimport { addCalc } from '../redux/actions';\nimport Header from '../components/Header';\nimport Loading from '../components/Loading';\nimport '../styles/QuestionsStyle.css';\nimport '../styles/Game.css';\nimport Question from '../components/Question';\n\nconst INITIAL_STATE = {\n  gameQuestions: [],\n  gameCategory: '',\n  questionName: '',\n  questionNumber: 0,\n  answers: [],\n  correctAnswer: '',\n  questionDifficulty: '',\n  userAnswer: '',\n  btnIsDisable: false,\n  seconds: 30,\n  click: false,\n  isFetching: true,\n};\n\nclass Game extends Component {\n  state = { ...INITIAL_STATE };\n\n  componentDidMount() {\n    this.setGame();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  handleClick = ({ target: { name, value } }) => {\n    this.setState(\n      { btnIsDisable: true, click: true, userAnswer: value },\n      () => {\n        const { questionDifficulty } = this.state;\n        if (name === 'correct') this.calculateScore(questionDifficulty);\n        clearInterval(this.timerId);\n      },\n    );\n  };\n\n  redirectTo = (route) => {\n    const { history } = this.props;\n    history.push(route);\n  };\n\n  setGame = async () => {\n    const ERROR_CODE = 3;\n    const response = await fetchGame(getStorage('token'));\n    if (response.response_code === ERROR_CODE) {\n      localStorage.removeItem('token');\n      this.redirectTo('/');\n    } else {\n      this.setState({ gameQuestions: response.results });\n      this.setNewQuestion();\n      this.countDownTimer();\n      this.setState({ isFetching: false });\n    }\n  };\n\n  nextQuestion = () => {\n    const { questionNumber } = this.state;\n    const maxQuestions = JSON.parse(getStorage('options')).quantity;\n    if (questionNumber === maxQuestions - 1) {\n      this.redirectTo('/feedback');\n    } else {\n      this.setState(\n        (pastState) => ({\n          userAnswer: '',\n          questionNumber: pastState.questionNumber + 1,\n          btnIsDisable: false,\n          click: false,\n        }),\n        () => {\n          this.setNewQuestion();\n          this.setState({ seconds: 30, btnIsDisable: false });\n          this.countDownTimer();\n        },\n      );\n    }\n  };\n\n  setNewQuestion = () => {\n    const { questionNumber, gameQuestions } = this.state;\n    const answers = this.setGameAnswers(gameQuestions[questionNumber]);\n    this.setState({\n      questionDifficulty: gameQuestions[questionNumber].difficulty,\n      gameCategory: gameQuestions[questionNumber].category,\n      questionName: gameQuestions[questionNumber].question,\n      correctAnswer: gameQuestions[questionNumber].correct_answer,\n      answers,\n    });\n  };\n\n  setGameAnswers = (question) => {\n    const { correct_answer: correct, incorrect_answers: wrongs } = question;\n    // https://flaviocopes.com/how-to-shuffle-array-javascript/\n    const VALUE_BETWEEN = 0.5;\n    return [...wrongs, correct].sort(() => Math.random() - VALUE_BETWEEN);\n  };\n\n  calculateScore = (difficulty) => {\n    const { seconds } = this.state;\n    const { score, addCalcDispatch } = this.props;\n    const TEN = 10;\n    const THREE = 3;\n    if (difficulty === 'easy') addCalcDispatch(score + TEN + seconds * 1);\n    if (difficulty === 'medium') addCalcDispatch(score + TEN + seconds * 2);\n    if (difficulty === 'hard') addCalcDispatch(score + TEN + seconds * THREE);\n  };\n\n  countDownTimer = () => {\n    const ONE_SECOND = 1000;\n    this.timerId = setInterval(() => {\n      const { seconds, click } = this.state;\n      if (click || seconds === 0) {\n        clearInterval(this.timerId);\n        return this.setState({ btnIsDisable: true, click: true });\n      }\n      return this.setState((past) => ({ seconds: past.seconds - 1 }));\n    }, ONE_SECOND);\n  };\n\n  render() {\n    const {\n      isFetching, gameCategory, questionName,\n      answers, correctAnswer, btnIsDisable,\n      click, questionDifficulty, seconds, userAnswer,\n    } = this.state;\n    return (\n      <main className=\"Game-Container\">\n        {isFetching ? (<Loading />) : (\n          <>\n            <Header />\n            <section className=\"Game\">\n              <div className=\"Informations-Container\">\n                <div className=\"Timer\">\n                  <HiClock />\n                  <p>{seconds}</p>\n                </div>\n                <div className=\"Difficulty\">\n                  <RiCheckboxBlankCircleFill className={ questionDifficulty } />\n                </div>\n                <div className=\"Game-Question\">\n                  <h3 data-testid=\"question-category\">{gameCategory}</h3>\n                  <h1 data-testid=\"question-text\">{decode(questionName)}</h1>\n                </div>\n              </div>\n              <div className=\"Answers-Container\" data-testid=\"answer-options\">\n                <div className={ `Answer-Result ${click ? 'Visible' : 'Hide'}` }>\n                  {userAnswer === correctAnswer ? (\n                    <FaCheckCircle className=\"easy\" />\n                  ) : (\n                    <FaTimesCircle className=\"hard\" />\n                  )}\n                </div>\n                {answers.map((answer, index) => (\n                  <Question\n                    key={ answer }\n                    answer={ answer }\n                    index={ index }\n                    click={ click }\n                    btnIsDisable={ btnIsDisable }\n                    correctAnswer={ correctAnswer }\n                    onClick={ this.handleClick }\n                  />\n                ))}\n              </div>\n              <div\n                className={ `Next-BtnContainer ${click ? 'Visible' : 'Hide'}` }\n              >\n                {click && (\n                  <button\n                    type=\"button\"\n                    name=\"next\"\n                    className=\"Next-Button\"\n                    data-testid=\"btn-next\"\n                    onClick={ this.nextQuestion }\n                  >\n                    Next\n                  </button>\n                )}\n              </div>\n            </section>\n          </>\n        )}\n      </main>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: shape({ push: func }).isRequired,\n  addCalcDispatch: func.isRequired,\n  score: number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ score: state.player.score });\n\nconst mapDispatchToProps = (dispatch) => ({\n  addCalcDispatch: (calc) => dispatch(addCalc(calc)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","export const ADD_PLAYER = 'ADD_PLAYER';\nexport const ADD_CALC = 'ADD_CALC';\nexport const NEW_CATEGORY = 'NEW_CATEGORY';\nexport const RESET_OLD_PLAYER = 'RESET_OLD_PLAYER';\nexport const RESET_SCORE = 'RESET_SCORE';\n\nexport const addPlayer = (payload) => ({\n  type: ADD_PLAYER,\n  payload,\n});\n\nexport const addCalc = (payload) => ({\n  type: ADD_CALC,\n  payload,\n});\n\nexport const changeCategory = (payload) => ({\n  type: NEW_CATEGORY,\n  payload,\n});\n\nexport const resetPlayer = () => ({\n  type: RESET_OLD_PLAYER,\n});\n\nexport const resetScore = () => ({\n  type: RESET_SCORE,\n});\n","import React from 'react';\nimport { func, shape } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addPlayer } from '../redux/actions';\nimport { saveStorage } from '../services/localStorage';\nimport { requestTokenAPI } from '../services/requestAPI';\nimport { FiSettings, FiPlay }  from 'react-icons/fi';\nimport '../App.css';\nimport '../styles/Login.css';\n\nclass Login extends React.Component {\n  state = {\n    name: '',\n    email: '',\n    isSaveButtonDisabled: true,\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value }, () => this.buttonChange());\n  };\n\n  buttonChange = () => {\n    const { email, name } = this.state;\n    const minValue = 3;\n    const emailValidation = /\\S+@\\S+\\.\\S+/;\n    const validation = emailValidation.test(email) && name.length >= minValue;\n    this.setState({ isSaveButtonDisabled: !validation });\n  };\n\n  handleClick = async (event) => {\n    event.preventDefault();\n    const { name, email } = this.state;\n    const { addPlayerDispatch, history } = this.props;\n    addPlayerDispatch({ name, email });\n    const token = await requestTokenAPI();\n    saveStorage('token', token);\n    history.push('/game');\n  };\n\n  render() {\n    const { isSaveButtonDisabled } = this.state;\n    const { history } = this.props;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">\n            Tr\n            <span>ivi</span>\n            a\n          </h1>\n          <p>SUA VEZ</p>\n          <form className=\"formLogin\">\n            <label htmlFor=\"input-name\">\n              Name\n              <input\n                name=\"name\"\n                id=\"input-name\"\n                onChange={ this.handleChange }\n                data-testid=\"input-player-name\"\n                maxLength=\"17\"\n              />\n            </label>\n            <label htmlFor=\"input-email\">\n              Email\n              <input\n                name=\"email\"\n                onChange={ this.handleChange }\n                data-testid=\"input-gravatar-email\"\n                id=\"input-email\"\n              />\n            </label>\n            <div className=\"button-container\">\n              <button\n                data-testid=\"btn-play\"\n                onClick={ this.handleClick }\n                type=\"submit\"\n                disabled={ isSaveButtonDisabled }\n              >\n              <div>\n             {/* aqui botao PLAY */}\n                <FiPlay />\n              </div>\n              </button>\n              <button\n                type=\"button\"\n                data-testid=\"btn-settings\"\n                onClick={ () => history.push('/settings') }\n              >\n              <div>\n              {/* aqui botao SETTINGS */}\n                <FiSettings />\n              </div>\n              </button>\n            </div>\n          </form>\n        </header>\n\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPlayerDispatch: (state) => dispatch(addPlayer(state)),\n});\n\nLogin.propTypes = {\n  addPlayerDispatch: func.isRequired,\n  history: shape({ push: func }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getStorage, saveStorage } from '../services/localStorage';\nimport { fetchCategories } from '../services/requestAPI';\nimport Loading from '../components/Loading';\nimport '../styles/Settings.css';\n\nclass Settings extends Component {\n  constructor() {\n    super();\n    if (!getStorage('options')) {\n      saveStorage(\n        'options',\n        JSON.stringify({\n          category: 'Any category',\n          difficulty: 'Any difficulty',\n          type: 'Any Type',\n          quantity: '10',\n        }),\n      );\n    }\n    this.state = {\n      category: JSON.parse(getStorage('options')).category,\n      difficulty: JSON.parse(getStorage('options')).difficulty,\n      type: JSON.parse(getStorage('options')).type,\n      quantity: JSON.parse(getStorage('options')).quantity,\n      categories: [],\n      isLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.getCategoriesList();\n  }\n\n  getCategoriesList = async () => {\n    this.setState(\n      {\n        categories: await fetchCategories(),\n      },\n      () => {\n        const { categories, category } = this.state;\n        const categoryName = typeof category === 'string'\n          ? ''\n          : categories.find(({ id }) => id === category).name;\n        this.setState({\n          category: categoryName || '',\n          isLoading: false,\n        });\n      },\n    );\n  };\n\n  setNewOption = ({ target }) => {\n    this.setState({ [target.name]: target.value });\n    if (target.name === 'category' && !target.value.includes('Any')) {\n      const { categories } = this.state;\n      const { id } = categories.find(({ name }) => name === target.value);\n      this.saveOption(target.name, id);\n    } else {\n      this.saveOption(target.name, target.value);\n    }\n  };\n\n  saveOption = (name, value) => {\n    saveStorage(\n      'options',\n      JSON.stringify({\n        ...JSON.parse(getStorage('options')),\n        [name]: value,\n      }),\n    );\n  };\n\n  render() {\n    const { category, difficulty, type, categories, quantity, isLoading } = this.state;\n    return (\n      <main className=\"Settings-Container\">\n        <h2 data-testid=\"settings-title\">Settings</h2>\n        <section className=\"Settings\">\n          {isLoading ? (\n            <Loading inSettings />\n          ) : (\n            <form className=\"Settings-Form\">\n              <label htmlFor=\"quantity\">\n                Questions Quantity\n                <input\n                  onChange={ this.setNewOption }\n                  value={ quantity }\n                  name=\"quantity\"\n                  id=\"quantity\"\n                  type=\"number\"\n                />\n              </label>\n              <label htmlFor=\"category\">\n                Category\n                <select\n                  onChange={ this.setNewOption }\n                  value={ category }\n                  name=\"category\"\n                  id=\"category\"\n                >\n                  <option>Any Category</option>\n                  {categories.map(({ id, name }) => (\n                    <option key={ id }>{name}</option>\n                  ))}\n                </select>\n              </label>\n              <label htmlFor=\"difficulty\">\n                Difficulty\n                <select\n                  onChange={ this.setNewOption }\n                  value={ difficulty }\n                  name=\"difficulty\"\n                  id=\"difficulty\"\n                >\n                  <option id=\"any\">Any difficulty</option>\n                  <option id=\"easy\">Easy</option>\n                  <option id=\"medium\">Medium</option>\n                  <option id=\"hard\">Hard</option>\n                </select>\n              </label>\n              <label htmlFor=\"type\">\n                Type\n                <select\n                  onChange={ this.setNewOption }\n                  value={ type }\n                  name=\"type\"\n                  id=\"type\"\n                >\n                  <option id=\"any\">Any Type</option>\n                  <option id=\"multiple\">Multiple Choice</option>\n                  <option id=\"boolean\">True / False</option>\n                </select>\n              </label>\n              <Link className=\"Save-Btn\" to=\"/\">\n                Done\n              </Link>\n            </form>\n          )}\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default Settings;\n","import { number } from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Score extends Component {\n  render() {\n    const { assertions, score } = this.props;\n    return (\n      <div className=\"score-info\">\n        <p id=\"total-question\" data-testid=\"feedback-total-question\">\n          {assertions === 1 ? '1 Right answer' : `${assertions} Right answers`}\n        </p>\n        <p className=\"total-score\" data-testid=\"feedback-total-score\">\n          {score}\n          {' '}\n          Points\n        </p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n});\n\nScore.propTypes = {\n  assertions: number.isRequired,\n  score: number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Score);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass FeedbackMessage extends Component {\n  state = {\n    idChange: false,\n  }\n\n  componentDidMount = () => {\n    const NUMBER_OF_ASSERTIONS = 3;\n    const { assertions } = this.props;\n    if (assertions >= NUMBER_OF_ASSERTIONS) {\n      this.setState({ idChange: true });\n    }\n  }\n\n  handlerMessage = () => {\n    const NUMBER_OF_ASSERTIONS = 3;\n    const { assertions } = this.props;\n    return assertions >= NUMBER_OF_ASSERTIONS\n      ? 'Well Done!'\n      : 'Could be better...';\n  };\n\n  render() {\n    const { idChange } = this.state;\n    return (\n      <div>\n        <p\n          className={ idChange ? 'goodMessage' : 'badMessage' }\n          data-testid=\"feedback-text\"\n        >\n          { this.handlerMessage() }\n\n        </p>\n      </div>\n    );\n  }\n}\n\nFeedbackMessage.propTypes = {\n  assertions: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n});\n\nexport default connect(mapStateToProps)(FeedbackMessage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { func, number, shape, string } from 'prop-types';\nimport {\n  resetPlayer as resetPlayerAction,\n  resetScore as resetScoreAction,\n} from '../redux/actions';\nimport getPicture from '../helpers/defaultPicture';\nimport Header from '../components/Header';\nimport Score from '../components/Score';\nimport FeedbackMessage from '../components/FeedbackMessage';\nimport '../styles/Feedback.css';\nimport { saveStorage } from '../services/localStorage';\n\nclass Feedback extends Component {\n  componentDidMount() {\n    this.saveUserScore();\n  }\n\n  componentWillUnmount() {\n    const { resetScore } = this.props;\n    resetScore();\n  }\n\n  saveUserScore = () => {\n    const { name, score, gravatarEmail } = this.props;\n    const picture = getPicture(name, gravatarEmail);\n    const data = {\n      name,\n      score,\n      picture,\n    };\n    if (name && score !== 0) {\n      // .sort((a, b) => b.score - a.score)\n      const items = JSON.parse(localStorage.getItem('ranking') || '[]');\n      const itemsSorted = items.concat(data);\n      saveStorage('ranking', JSON.stringify(itemsSorted));\n    }\n  };\n\n  handleClick = (route) => {\n    const { history, resetPlayer } = this.props;\n    if (route === '/') resetPlayer();\n    history.push(route);\n  };\n\n  render() {\n    return (\n      <main>\n        <Header hideScore homeBtn />\n        <div className=\"feedback-container\">\n          <FeedbackMessage />\n          <Score />\n          <div className=\"feedback-buttons\">\n            <button\n              type=\"button\"\n              onClick={ () => this.handleClick('/') }\n              data-testid=\"btn-play-again\"\n              className=\"playBtn\"\n            >\n              Play again\n            </button>\n            <button\n              type=\"button\"\n              onClick={ () => this.handleClick('/ranking') }\n              data-testid=\"btn-ranking\"\n              className=\"rankingBtn\"\n            >\n              Ranking\n            </button>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n  gravatarEmail: state.player.gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetPlayer: () => dispatch(resetPlayerAction()),\n  resetScore: () => dispatch(resetScoreAction()),\n});\n\nFeedback.propTypes = {\n  name: string.isRequired,\n  score: number.isRequired,\n  gravatarEmail: string.isRequired,\n  history: shape({ push: func }).isRequired,\n  resetPlayer: func.isRequired,\n  resetScore: func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport defaultPicture from '../helpers/defaultPicture';\nimport Header from '../components/Header';\nimport '../styles/Ranking.css';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n    };\n  }\n\n  componentDidMount() {\n    let items = JSON.parse(localStorage.getItem('ranking') || '[]');\n    items = items.sort((a, b) => b.score - a.score);\n    this.setState({ items });\n  }\n\n  render() {\n    const { items } = this.state;\n    return (\n      <div>\n        <Header hideScore homeBtn />\n        <div className=\"ranking-body\">\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <div className=\"ranking-list\">\n            {items.map((item, index) => (\n              <div key={ item.name } className=\"ranking-list-card\">\n                <div>\n                  <img\n                    src={ item.picture }\n                    alt={ `Avatar of ${item.name}` }\n                    onError={ defaultPicture }\n                  />\n                </div>\n                <p\n                  data-testid={ `player-name-${index}` }\n                  className=\"card-personal-name\"\n                >\n                  {item.name}\n                </p>\n                <p\n                  data-testid={ `player-score-${index}` }\n                  className=\"card-personal-score\"\n                >\n                  {item.score}\n                  {' '}\n                  points\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Game from './pages/Game';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","import { ADD_PLAYER, ADD_CALC, RESET_OLD_PLAYER, RESET_SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  name: 'Player',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nfunction player(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case ADD_PLAYER:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.email,\n    };\n  case ADD_CALC:\n    return {\n      ...state,\n      score: action.payload,\n      assertions: state.assertions + 1,\n    };\n  case RESET_OLD_PLAYER:\n    return {\n      ...state,\n      name: 'Player',\n      assertions: 0,\n      score: 0,\n      gravatarEmail: '',\n    };\n  case RESET_SCORE:\n    return {\n      ...state,\n      assertions: 0,\n      score: 0,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport player from './player';\n\nconst rootReducer = combineReducers({ player });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}